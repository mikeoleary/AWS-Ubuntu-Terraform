{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Installing Cloudformation helper scripts in Ubuntu Ubuntu16 LTS, starting reference for template was at https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/solutions/HelperNonAmaznAmi",
    "Parameters" : {
      "sshKey": {
        "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
        "Type": "AWS::EC2::KeyPair::KeyName"
      },
      "InstanceType" : {
        "Description" : "WebServer EC2 instance type",
        "Type" : "String",
        "Default" : "t2.small",
        "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
        "ConstraintDescription" : "must be a valid EC2 instance type."
      },
      "ubuntuVersion": {
        "Description" : "Ubuntu Version",
        "Type" : "String",
        "Default" : "Ubuntu16",
        "AllowedValues" : [ "Ubuntu16", "Ubuntu18"],
        "ConstraintDescription" : "must be a valid EC2 instance type."
      },
      "SSHLocation" : {
        "Description" : "The IP address range that can be used to SSH to the EC2 instances",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
     },
     "vpcStackName" : {
          "Description" : "Name of the Stack that deployed the VPC",
          "Type": "String"
     }
    },
    "Mappings": {
        "AWSRegionAMIEC2" : {
            "us-east-1"        : {"Ubuntu16" : "ami-d15a75c7", "Ubuntu18" : "ami-064a0193585662d74"},
            "us-east-2"        : {"Ubuntu16" : "ami-8b92b4ee", "Ubuntu18" : "ami-021b7b04f1ac696c2"},
            "us-west-2"        : {"Ubuntu16" : "ami-746aba14", "Ubuntu18" : "ami-09a3d8a7177216dcf"},
            "us-west-1"        : {"Ubuntu16" : "ami-a9a8e4c9", "Ubuntu18" : "ami-056d04da775d124d7"},
            "eu-west-1"        : {"Ubuntu16" : "ami-844e0bf7", "Ubuntu18" : "ami-01cca82393e531118"},
            "eu-central-1"     : {"Ubuntu16" : "ami-a9a557c6", "Ubuntu18" : "ami-0cdab515472ca0bac"},
            "ap-northeast-1"   : {"Ubuntu16" : "ami-d82efcb9", "Ubuntu18" : "ami-0cb1c8cab7f5249b6"},
            "ap-southeast-1"   : {"Ubuntu16" : "ami-d554f1b6", "Ubuntu18" : "ami-099d318f80eab7e94"},
            "ap-southeast-2"   : {"Ubuntu16" : "ami-0bc1f168", "Ubuntu18" : "ami-08a648fb5cc86fb74"},
            "us-gov-west-1"    : {"Ubuntu16" : "ami-939412f2", "Ubuntu18" : "ami-60501e01"},
            "us-gov-east-1"    : {"Ubuntu16" : "ami-9350b7e2", "Ubuntu18" : "ami-cce606bd"}
            },
          "UbuntuVersionSources" : {
            "Ubuntu16" : { "cmd": "deb https://nginx.org/packages/mainline/ubuntu/ xenial nginx\ndeb-src https://nginx.org/packages/mainline/ubuntu/ xenial nginx\n"},
            "Ubuntu18" : { "cmd": "deb https://nginx.org/packages/mainline/ubuntu/ bionic nginx\ndeb-src https://nginx.org/packages/mainline/ubuntu/ bionic nginx\n"}
          }
    },      
   "Resources" : {
      "EIP": {
        "Properties": {
         "Domain": "vpc"
        },
        "Type": "AWS::EC2::EIP"
       },
      "EIPAddressAssociation": {
        "Properties": {
         "AllocationId": {
          "Fn::GetAtt": [
           "EIP",
           "AllocationId"
          ]
         },
         "NetworkInterfaceId": {
          "Ref": "networkInterface"
         }
        },
        "Type": "AWS::EC2::EIPAssociation"
       },
      "networkInterface": {
        "Properties": {
         "Description": "Public External Interface",
         "GroupSet": [
          {
           "Ref": "securityGroup"
          }
         ],
         "SourceDestCheck": false,
         "SubnetId": {
            "Fn::ImportValue" : {"Fn::Sub": "${vpcStackName}-subnet1" }
         }
        },
        "Type": "AWS::EC2::NetworkInterface"
       },
      "EC2Instance" : {
        "Type" : "AWS::EC2::Instance",
        "CreationPolicy" : {
          "ResourceSignal" : {
            "Timeout" : "PT10M",
            "Count"   : "1"
          }
        },
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "configSets" : {
              "full_install" : [ "install_and_enable_cfn_hup" ],
              "install_nginx" : [ "install_and_enable_cfn_hup", "install_nginx" ],
              "install_docker" : [ "install_and_enable_cfn_hup", "install_docker" ],
              "install_terraform" : [ "install_and_enable_cfn_hup", "install_terraform" ]
            },
            "install_and_enable_cfn_hup" : {
              "files" : {
                          "/etc/cfn/cfn-hup.conf" : {
                            "content" : { "Fn::Join" : ["", [
                              "[main]\n",
                              "stack=", { "Ref" : "AWS::StackId" }, "\n",
                              "region=", { "Ref" : "AWS::Region" }, "\n"
                            ]]},
                            "mode"    : "000400",
                            "owner"   : "root",
                            "group"   : "root"
                          },
                          "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                            "content": { "Fn::Join" : ["", [
                              "[cfn-auto-reloader-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                              "action=/opt/aws/bin/cfn-init -v ",
                              "         --stack ", { "Ref" : "AWS::StackName" },
                              "         --resource EC2Instance ",
                              "         --configsets install_terraform ",
                              "         --region ", { "Ref" : "AWS::Region" }, "\n",
                              "runas=root\n"
                            ]]}
                          },
                         "/lib/systemd/system/cfn-hup.service": {
                              "content": { "Fn::Join" : ["", [
                              "[Unit]\n",
                              "Description=cfn-hup daemon\n\n",
                              "[Service]\n",
                              "Type=simple\n",
                              "ExecStart=/opt/aws/bin/cfn-hup\n", 
                              "Restart=always\n\n",
                              "[Install]\n",
                              "WantedBy=multi-user.target"]]}
                               }
                    },  
              "commands" : {
                    "01enable_cfn_hup" : {
                        "command" : "systemctl enable cfn-hup.service"
                    },
                    "02start_cfn_hup" : {
                        "command" : "systemctl start cfn-hup.service"
                    }
                }
             },
             "install_nginx": {
               "files": {
                 "/etc/apt/sources.list.d/nginx.list": {
                    "content": {
                      "Fn::FindInMap": [ "UbuntuVersionSources", { "Ref": "ubuntuVersion" }, "cmd"]
                    }
                  }
                },
                "commands": {
                  "010-download_key_and_install_nginx": {
                     "command": {
                        "Fn::Join": [
                        "\n",
                        [
                          "wget https://nginx.org/keys/nginx_signing.key",
                          "apt-key add nginx_signing.key",
                          "apt-get update",
                          "sudo apt-get install nginx",
                          "nginx"
                        ]
                        ]
                     }
                  }
                }
             },
			 "install_docker": {
			   "files": {
			   },
			   "commands": {
                 "010-install-docker": {
                     "command": {
                        "Fn::Join": [
                        "\n",
                        [
                          "sudo apt-get install software-properties-common",
						  "sudo apt-add-repository -y ppa:ansible/ansible",
						  "sudo apt-get update -y",
						  "sudo apt-get install -y virtualenv",
						  "sudo apt-get install -y apt-transport-https",
						  "sudo apt-get install -y python-pip",
						  "sudo apt-get install -y jq",
						  "sudo apt-get install -y docker.io",
						  "sudo docker run -d -p 80:80 --net=host --restart unless-stopped -e F5DEMO_APP=website -e F5DEMO_NODENAME='F5 Azure SACA' -e F5DEMO_COLOR=ffd734 -e F5DEMO_NODENAME_SSL='F5 Azure SACA (SSL)' -e F5DEMO_COLOR_SSL=a0bf37 chen23/f5-demo-app:ssl"
                        ]
                        ]
                     }
                  }
			   }
             },
             "install_terraform": {
                "files": {
                },
                "commands": {
                  "010-install-terraform": {
                      "command": {
                         "Fn::Join": [
                         "\n",
                         [
                           "sudo apt-get install software-properties-common",
                           "sudo apt-get update -y",
                           "sudo apt-get install -y apt-transport-https",
                           "sudo apt-get install -y wget unzip",
                           "sudo wget https://releases.hashicorp.com/terraform/0.12.12/terraform_0.12.12_linux_amd64.zip",
                           "sudo unzip ./terraform_0.12.12_linux_amd64.zip -d /usr/local/bin/"
                         ]
                         ]
                      }
                   }
                }
              }
          }
        },
        "Properties" : {
          "InstanceType" : { "Ref" : "InstanceType" },
          "KeyName" : { "Ref" : "sshKey" },
          "NetworkInterfaces": [
            {
             "Description": "Public or External Interface of IPS",
             "DeviceIndex": "0",
             "NetworkInterfaceId": {
              "Ref": "networkInterface"
             }
            }
           ],
          "Tags": [
            {
             "Key": "Name",
             "Value": {"Fn::Sub": "${AWS::StackName}-ubuntu-VM" }
            }
           ],
          "ImageId" : {"Fn::FindInMap": [ "AWSRegionAMIEC2", { "Ref": "AWS::Region" },{ "Ref": "ubuntuVersion" }]},
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
               "#!/bin/bash -xe\n",
               "apt-get update -y\n",
               "apt-get install -y python-setuptools\n",
               "mkdir -p /opt/aws/bin\n",
               "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
               "sudo python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz\n",
                "/opt/aws/bin/cfn-init -v ",
               "         --stack ", { "Ref" : "AWS::StackName" },
               "         --resource EC2Instance ",
               "         --configsets install_terraform ",
               "         --region ", { "Ref" : "AWS::Region" }, "\n",
  
               "/opt/aws/bin/cfn-signal -e $? ",
               "         --stack ", { "Ref" : "AWS::StackName" },
               "         --resource EC2Instance ",
               "         --region ", { "Ref" : "AWS::Region" }, "\n"
              ]]}}}
      },
      "securityGroup": {
        "Properties": {
         "GroupDescription": "Public or external interface rules for interface",
         "SecurityGroupIngress": [
          {
           "CidrIp": "0.0.0.0/0",
           "FromPort": "80",
           "IpProtocol": "tcp",
           "ToPort": "80"
          },
          {
           "CidrIp": "0.0.0.0/0",
           "FromPort": "443",
           "IpProtocol": "tcp",
           "ToPort": "443"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
           },
           { 
            "IpProtocol" : "icmp", 
            "FromPort" : 8, 
            "ToPort" : -1, 
            "CidrIp" : "0.0.0.0/0" 
           }
         ],
         "Tags": [
          {
           "Key": "Name",
           "Value": {"Fn::Sub": "${AWS::StackName}-securityGroup" }
          }
         ],
         "VpcId": {
          "Fn::ImportValue" : {"Fn::Sub": "${vpcStackName}-vpcId" }
         }
        },
        "Type": "AWS::EC2::SecurityGroup"
       }
  },
  "Outputs": {
    "StackName": {
        "Value": {
         "Ref": "AWS::StackName"
        },
        "Export" : {
            "Name" : {"Fn::Sub": "${AWS::StackName}-StackName" }
        }
    },
    "privateIp": {
        "Description": "Internally routable IP",
        "Value": {
         "Fn::GetAtt": [
          "networkInterface",
          "PrimaryPrivateIpAddress"
         ]
        },
        "Export" : {
            "Name" : {"Fn::Sub": "${AWS::StackName}-privateIp" }
        }
       },
    "networkInterface": {
        "Description": "Network interface",
        "Value": {
         "Ref": "networkInterface"
        },
        "Export" : {
            "Name" : {"Fn::Sub": "${AWS::StackName}-networkInterface" }
        }
    }
  }
}
